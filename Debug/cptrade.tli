// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (5f9fc9eb).
//
// j:\projects\portfoliomanager\90.프로토타입\stockcurdlg\debug\cptrade.tli
//
// Wrapper implementations for Win32 type library C:\app\DAISHIN\CYBOSPLUS\cptrade.dll
// compiler-generated file created 08/20/11 at 04:06:17 - DO NOT EDIT!

#pragma once

//
// interface ICpTdUtil wrapper method implementations
//

inline short ICpTdUtil::TradeInit ( long Reserved ) {
    short _result = 0;
    HRESULT _hr = raw_TradeInit(Reserved, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ICpTdUtil::GetAccountNumber ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_AccountNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICpTdUtil::GetGoodsList ( _bstr_t acc, CPE_ACC_GOODS Filter ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_GoodsList(acc, Filter, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// interface ICpTdField wrapper method implementations
//

inline _bstr_t ICpTdField::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short ICpTdField::Getfid ( ) {
    short _result = 0;
    HRESULT _hr = get_fid(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface ICpTdFields wrapper method implementations
//

inline long ICpTdFields::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ICpTdFields::GetItem ( long Index ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline IUnknownPtr ICpTdFields::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface ICpTdDib wrapper method implementations
//

inline _variant_t ICpTdDib::GetHeader ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICpTdDib::GetData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICpTdDib::GetInput ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Input(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICpTdDib::GetHeaderValue ( int __MIDL__ICpTdDib0000 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetHeaderValue(__MIDL__ICpTdDib0000, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ICpTdDib::GetDataValue ( int __MIDL__ICpTdDib0001, int __MIDL__ICpTdDib0002 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDataValue(__MIDL__ICpTdDib0001, __MIDL__ICpTdDib0002, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long ICpTdDib::GetContinue ( ) {
    long _result = 0;
    HRESULT _hr = get_Continue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ICpTdDib::PutContinue ( long pVal ) {
    HRESULT _hr = put_Continue(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t ICpTdDib::GetInputValue ( int __MIDL__ICpTdDib0003 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetInputValue(__MIDL__ICpTdDib0003, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT ICpTdDib::SetInputValue ( int __MIDL__ICpTdDib0004, const _variant_t & newVal ) {
    HRESULT _hr = raw_SetInputValue(__MIDL__ICpTdDib0004, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short ICpTdDib::GetDibStatus ( ) {
    short _result = 0;
    HRESULT _hr = raw_GetDibStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ICpTdDib::GetDibMsg1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDibMsg1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICpTdDib::GetDibMsg2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDibMsg2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short ICpTdDib::BlockRequest ( ) {
    short _result = 0;
    HRESULT _hr = raw_BlockRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short ICpTdDib::BlockRequest2 ( short BlockOption ) {
    short _result = 0;
    HRESULT _hr = raw_BlockRequest2(BlockOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline short ICpTdDib::Request ( ) {
    short _result = 0;
    HRESULT _hr = raw_Request(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface _ITdDibEvents wrapper method implementations
//

inline HRESULT _ITdDibEvents::Received ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
