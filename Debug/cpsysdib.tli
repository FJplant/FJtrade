// Created by Microsoft (R) C/C++ Compiler Version 15.00.30729.01 (8a98586e).
//
// j:\projects\portfoliomanager\90.프로토타입\stockcurdlg\debug\cpsysdib.tli
//
// Wrapper implementations for Win32 type library C:\app\DAISHIN\CYBOSPLUS\cpsysdib.dll
// compiler-generated file created 08/20/11 at 04:06:17 - DO NOT EDIT!

#pragma once

//
// interface ISysDib wrapper method implementations
//

inline HRESULT ISysDib::Request ( ) {
    HRESULT _hr = raw_Request();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISysDib::Subscribe ( ) {
    HRESULT _hr = raw_Subscribe();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ISysDib::Unsubscribe ( ) {
    HRESULT _hr = raw_Unsubscribe();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t ISysDib::GetHeader ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Header(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISysDib::GetData ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Data(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISysDib::GetInput ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Input(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISysDib::GetHeaderValue ( int __MIDL__ISysDib0000 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetHeaderValue(__MIDL__ISysDib0000, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _variant_t ISysDib::GetDataValue ( int __MIDL__ISysDib0001, int __MIDL__ISysDib0002 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetDataValue(__MIDL__ISysDib0001, __MIDL__ISysDib0002, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline long ISysDib::GetContinue ( ) {
    long _result = 0;
    HRESULT _hr = get_Continue(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t ISysDib::GetInputValue ( int __MIDL__ISysDib0003 ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_GetInputValue(__MIDL__ISysDib0003, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline HRESULT ISysDib::SetInputValue ( int __MIDL__ISysDib0004, const _variant_t & newVal ) {
    HRESULT _hr = raw_SetInputValue(__MIDL__ISysDib0004, newVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short ISysDib::GetDibStatus ( ) {
    short _result = 0;
    HRESULT _hr = raw_GetDibStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t ISysDib::GetDibMsg1 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDibMsg1(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ISysDib::GetDibMsg2 ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDibMsg2(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline short ISysDib::BlockRequest ( ) {
    short _result = 0;
    HRESULT _hr = raw_BlockRequest(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ISysDib::SubscribeLatest ( ) {
    HRESULT _hr = raw_SubscribeLatest();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline short ISysDib::BlockRequest2 ( short BlockOption ) {
    short _result = 0;
    HRESULT _hr = raw_BlockRequest2(BlockOption, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// dispinterface _ISysDibEvents wrapper method implementations
//

inline HRESULT _ISysDibEvents::Received ( ) {
    return _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
